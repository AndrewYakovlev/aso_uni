
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  customerGroupId: 'customerGroupId',
  personalDiscount: 'personalDiscount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AnonymousUserScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  lastActivity: 'lastActivity'
};

exports.Prisma.PushSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dh: 'p256dh',
  auth: 'auth',
  userAgent: 'userAgent',
  deviceName: 'deviceName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  newChat: 'newChat',
  newMessage: 'newMessage',
  chatAssigned: 'chatAssigned',
  chatStatusChanged: 'chatStatusChanged',
  orderStatusChanged: 'orderStatusChanged',
  enableSchedule: 'enableSchedule',
  scheduleStart: 'scheduleStart',
  scheduleEnd: 'scheduleEnd',
  scheduleTimezone: 'scheduleTimezone',
  scheduleDays: 'scheduleDays',
  soundEnabled: 'soundEnabled',
  vibrationEnabled: 'vibrationEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  body: 'body',
  data: 'data',
  subscriptionId: 'subscriptionId',
  status: 'status',
  errorMessage: 'errorMessage',
  sentAt: 'sentAt',
  clickedAt: 'clickedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  parentId: 'parentId',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  sku: 'sku',
  price: 'price',
  comparePrice: 'comparePrice',
  stock: 'stock',
  deliveryDays: 'deliveryDays',
  brandId: 'brandId',
  isOriginal: 'isOriginal',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  categoryId: 'categoryId',
  isPrimary: 'isPrimary'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  alt: 'alt',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  description: 'description',
  country: 'country',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CharacteristicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  type: 'type',
  unit: 'unit',
  isRequired: 'isRequired',
  isFilterable: 'isFilterable',
  filterType: 'filterType',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.CharacteristicCategoryScalarFieldEnum = {
  id: 'id',
  characteristicId: 'characteristicId',
  categoryId: 'categoryId'
};

exports.Prisma.CharacteristicValueScalarFieldEnum = {
  id: 'id',
  characteristicId: 'characteristicId',
  value: 'value',
  sortOrder: 'sortOrder'
};

exports.Prisma.ProductCharacteristicScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  characteristicId: 'characteristicId',
  value: 'value',
  characteristicValueId: 'characteristicValueId'
};

exports.Prisma.VehicleMakeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  country: 'country',
  logoUrl: 'logoUrl',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.VehicleModelScalarFieldEnum = {
  id: 'id',
  makeId: 'makeId',
  name: 'name',
  slug: 'slug',
  modelCode: 'modelCode',
  startYear: 'startYear',
  endYear: 'endYear',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.VehicleGenerationScalarFieldEnum = {
  id: 'id',
  modelId: 'modelId',
  name: 'name',
  slug: 'slug',
  startYear: 'startYear',
  endYear: 'endYear',
  bodyType: 'bodyType',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  metaKeywords: 'metaKeywords'
};

exports.Prisma.VehicleModificationScalarFieldEnum = {
  id: 'id',
  generationId: 'generationId',
  name: 'name',
  engineCode: 'engineCode',
  fuelType: 'fuelType',
  powerHp: 'powerHp',
  transmission: 'transmission'
};

exports.Prisma.VehicleApplicationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  modificationId: 'modificationId',
  kTypeId: 'kTypeId',
  notes: 'notes',
  isVerified: 'isVerified'
};

exports.Prisma.CrossReferenceScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  crossPartNumber: 'crossPartNumber',
  crossBrandId: 'crossBrandId',
  crossType: 'crossType',
  confidenceScore: 'confidenceScore',
  verifiedByExpert: 'verifiedByExpert'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.ViewHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  productId: 'productId',
  categoryId: 'categoryId',
  viewedAt: 'viewedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  chatProductId: 'chatProductId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt'
};

exports.Prisma.ChatProductScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  name: 'name',
  brand: 'brand',
  sku: 'sku',
  price: 'price',
  comparePrice: 'comparePrice',
  isOriginal: 'isOriginal',
  deliveryDays: 'deliveryDays',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.ChatProductImageScalarFieldEnum = {
  id: 'id',
  chatProductId: 'chatProductId',
  url: 'url',
  alt: 'alt',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ChatStatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  color: 'color',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  anonymousId: 'anonymousId',
  managerId: 'managerId',
  statusId: 'statusId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  senderType: 'senderType',
  messageType: 'messageType',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.OrderStatusScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  color: 'color',
  description: 'description',
  isInitial: 'isInitial',
  isFinalSuccess: 'isFinalSuccess',
  isFinalFailure: 'isFinalFailure',
  canCancelOrder: 'canCancelOrder',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.DeliveryMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  price: 'price',
  minAmount: 'minAmount',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  settings: 'settings',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  icon: 'icon',
  isOnline: 'isOnline',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  settings: 'settings',
  commission: 'commission',
  createdAt: 'createdAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  statusId: 'statusId',
  subtotal: 'subtotal',
  discountAmount: 'discountAmount',
  shippingAmount: 'shippingAmount',
  totalAmount: 'totalAmount',
  deliveryMethodId: 'deliveryMethodId',
  paymentMethodId: 'paymentMethodId',
  shippingAddress: 'shippingAddress',
  comment: 'comment',
  promoCodeId: 'promoCodeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  chatProductId: 'chatProductId',
  quantity: 'quantity',
  price: 'price',
  total: 'total'
};

exports.Prisma.OrderStatusLogScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  statusId: 'statusId',
  comment: 'comment',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  amount: 'amount',
  status: 'status',
  transactionId: 'transactionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  discountPercent: 'discountPercent',
  minOrderAmount: 'minOrderAmount',
  benefits: 'benefits'
};

exports.Prisma.DiscountRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  value: 'value',
  minAmount: 'minAmount',
  maxDiscount: 'maxDiscount',
  startDate: 'startDate',
  endDate: 'endDate',
  usageLimit: 'usageLimit',
  customerGroupId: 'customerGroupId',
  categories: 'categories',
  brands: 'brands',
  isActive: 'isActive'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discountRuleId: 'discountRuleId',
  usageCount: 'usageCount',
  usageLimit: 'usageLimit',
  personalUserId: 'personalUserId',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PromoCodeUsageScalarFieldEnum = {
  id: 'id',
  promoCodeId: 'promoCodeId',
  userId: 'userId',
  orderId: 'orderId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.CrossType = exports.$Enums.CrossType = {
  OEM: 'OEM',
  AFTERMARKET: 'AFTERMARKET',
  UNIVERSAL: 'UNIVERSAL'
};

exports.SenderType = exports.$Enums.SenderType = {
  CUSTOMER: 'CUSTOMER',
  MANAGER: 'MANAGER',
  SYSTEM: 'SYSTEM'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  PRODUCT_CARD: 'PRODUCT_CARD',
  SYSTEM: 'SYSTEM'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED: 'FIXED',
  FREE_SHIPPING: 'FREE_SHIPPING'
};

exports.Prisma.ModelName = {
  User: 'User',
  AnonymousUser: 'AnonymousUser',
  PushSubscription: 'PushSubscription',
  NotificationSettings: 'NotificationSettings',
  NotificationLog: 'NotificationLog',
  Category: 'Category',
  Product: 'Product',
  ProductCategory: 'ProductCategory',
  ProductImage: 'ProductImage',
  Brand: 'Brand',
  Characteristic: 'Characteristic',
  CharacteristicCategory: 'CharacteristicCategory',
  CharacteristicValue: 'CharacteristicValue',
  ProductCharacteristic: 'ProductCharacteristic',
  VehicleMake: 'VehicleMake',
  VehicleModel: 'VehicleModel',
  VehicleGeneration: 'VehicleGeneration',
  VehicleModification: 'VehicleModification',
  VehicleApplication: 'VehicleApplication',
  CrossReference: 'CrossReference',
  Favorite: 'Favorite',
  ViewHistory: 'ViewHistory',
  Cart: 'Cart',
  CartItem: 'CartItem',
  ChatProduct: 'ChatProduct',
  ChatProductImage: 'ChatProductImage',
  ChatStatus: 'ChatStatus',
  Chat: 'Chat',
  Message: 'Message',
  OrderStatus: 'OrderStatus',
  DeliveryMethod: 'DeliveryMethod',
  PaymentMethod: 'PaymentMethod',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderStatusLog: 'OrderStatusLog',
  Payment: 'Payment',
  CustomerGroup: 'CustomerGroup',
  DiscountRule: 'DiscountRule',
  PromoCode: 'PromoCode',
  PromoCodeUsage: 'PromoCodeUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
