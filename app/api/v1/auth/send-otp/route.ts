import { NextRequest } from 'next/server'
import { prisma } from '@/shared/lib/prisma'
import { cache } from '@/shared/lib/redis'
import { smsClient, SMSClient } from '@/shared/lib/sms/sms-client'
import { sendOTPSchema } from '@/shared/lib/validation/auth'
import { successResponse, errorResponse, withErrorHandler } from '@/shared/lib/api-errors'
import { ERROR_CODES, ApiError } from '@/shared/types'
import { AUTH, CACHE_KEYS, CACHE_TTL } from '@/shared/constants'

export const POST = withErrorHandler(async (request: NextRequest) => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const body = await request.json()
  const validationResult = sendOTPSchema.safeParse(body)

  if (!validationResult.success) {
    throw new ApiError(
      ERROR_CODES.VALIDATION_ERROR,
      '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      400,
      validationResult.error.flatten()
    )
  }

  const { phone } = validationResult.data

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting —á–µ—Ä–µ–∑ Redis
  const rateLimitKey = `otp_rate_limit:${phone}`
  const attempts = await cache.get<number>(rateLimitKey)

  if (attempts && attempts >= 3) {
    return errorResponse(
      ERROR_CODES.VALIDATION_ERROR,
      '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      429
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –∫–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ
  const recentOTPKey = `otp_recent:${phone}`
  const recentOTP = await cache.get<boolean>(recentOTPKey)

  if (recentOTP) {
    return errorResponse(
      ERROR_CODES.VALIDATION_ERROR,
      '–ö–æ–¥ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.',
      429
    )
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  await prisma.otpCode.deleteMany({
    where: {
      phone,
      OR: [{ expiresAt: { lt: new Date() } }, { attempts: { gte: AUTH.MAX_OTP_ATTEMPTS } }],
    },
  })

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
  const code = SMSClient.generateOTP()
  const expiresAt = new Date(Date.now() + AUTH.OTP_EXPIRES_IN)

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
  await prisma.otpCode.create({
    data: {
      phone,
      code,
      expiresAt,
      attempts: 0,
    },
  })

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
  const sent = await smsClient.sendOTP(phone, code)

  if (!sent) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —É–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –ë–î
    await prisma.otpCode.deleteMany({
      where: { phone, code },
    })

    throw new ApiError(
      ERROR_CODES.EXTERNAL_SERVICE_ERROR,
      '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      500
    )
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º rate limiting
  await cache.set(rateLimitKey, (attempts || 0) + 1, 60 * 15) // 15 –º–∏–Ω—É—Ç
  await cache.set(recentOTPKey, true, 60) // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
  console.log(`üì± OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`)

  return successResponse({
    success: true,
    message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
    // –í production –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expiresIn: process.env.NODE_ENV === 'development' ? AUTH.OTP_EXPIRES_IN / 1000 : undefined,
  })
})
