import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { cookies } from 'next/headers'
import { prisma } from '@/shared/lib/prisma'
import {
  formatPhoneNumber,
  generateAccessToken,
  generateRefreshToken,
  ACCESS_TOKEN_COOKIE,
  REFRESH_TOKEN_COOKIE,
  ANONYMOUS_TOKEN_COOKIE,
  COOKIE_OPTIONS,
} from '@/shared/lib/auth'
import { linkAnonymousToUser } from '@/shared/lib/anonymous'

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const verifyOTPSchema = z.object({
  phone: z.string().min(10),
  code: z.string().length(6),
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validationResult = verifyOTPSchema.safeParse(body)
    if (!validationResult.success) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö', details: validationResult.error.errors },
        { status: 400 }
      )
    }

    const { phone, code } = validationResult.data
    const formattedPhone = formatPhoneNumber(phone)

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { phone: formattedPhone },
    })

    if (!user) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π OTP –∫–æ–¥
    const otpCode = await prisma.otpCode.findFirst({
      where: {
        userId: user.id,
        code,
        expiresAt: {
          gte: new Date(),
        },
      },
    })

    if (!otpCode) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–¥–∞
      await prisma.otpCode.updateMany({
        where: {
          userId: user.id,
          expiresAt: {
            gte: new Date(),
          },
        },
        data: {
          attempts: {
            increment: 1,
          },
        },
      })

      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if (otpCode.attempts >= 5) {
      return NextResponse.json(
        { error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' },
        { status: 429 }
      )
    }

    // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    await prisma.otpCode.update({
      where: { id: otpCode.id },
      data: { expiresAt: new Date() },
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.user.update({
      where: { id: user.id },
      data: {
        phoneVerified: true,
        lastLoginAt: new Date(),
        lastActivityAt: new Date(),
      },
    })

    // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ cookie
    const cookieStore = await cookies()
    const anonymousToken = cookieStore.get(ANONYMOUS_TOKEN_COOKIE)?.value

    // –°–≤—è–∑—ã–≤–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º
    if (anonymousToken) {
      const anonymousUser = await prisma.anonymousUser.findUnique({
        where: { token: anonymousToken },
      })

      if (anonymousUser && !anonymousUser.userId) {
        console.log('üîó Linking anonymous user to real user:')
        console.log(`  Anonymous ID: ${anonymousUser.id}`)
        console.log(`  User ID: ${user.id}`)

        const linked = await linkAnonymousToUser(anonymousUser.id, user.id)

        if (linked) {
          console.log('‚úÖ Successfully linked anonymous user')
        } else {
          console.log('‚ùå Failed to link anonymous user')
        }
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const accessToken = generateAccessToken(user.id, user.role)
    const refreshToken = generateRefreshToken(user.id, user.role)

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ cookies
    cookieStore.set(ACCESS_TOKEN_COOKIE, accessToken, {
      ...COOKIE_OPTIONS,
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    })

    cookieStore.set(REFRESH_TOKEN_COOKIE, refreshToken, {
      ...COOKIE_OPTIONS,
      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
    })

    // –£–¥–∞–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    cookieStore.delete(ANONYMOUS_TOKEN_COOKIE)

    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        phone: user.phone,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
      },
    })
  } catch (error) {
    console.error('Error in verify-otp:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
