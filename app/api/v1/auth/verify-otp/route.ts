import { NextRequest } from 'next/server'
import { prisma } from '@/shared/lib/prisma'
import { createAccessToken, createRefreshToken } from '@/shared/lib/auth/jwt'
import { setAuthCookies, getTokenFromCookie, COOKIE_NAMES } from '@/shared/lib/auth/cookies'
import { mergeAnonymousDataToUser } from '@/shared/lib/auth/merge-user-data'
import { verifyOTPSchema } from '@/shared/lib/validation/auth'
import { successResponse, errorResponse, withErrorHandler } from '@/shared/lib/api-errors'
import { ERROR_CODES, ApiError } from '@/shared/types'
import { AUTH } from '@/shared/constants'

export const POST = withErrorHandler(async (request: NextRequest) => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const body = await request.json()
  const validationResult = verifyOTPSchema.safeParse(body)

  if (!validationResult.success) {
    throw new ApiError(
      ERROR_CODES.VALIDATION_ERROR,
      '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      400,
      validationResult.error.flatten()
    )
  }

  const { phone, code, firstName, lastName, email } = validationResult.data

  // –ò—â–µ–º –∫–æ–¥ –≤ –ë–î
  const otpCode = await prisma.otpCode.findFirst({
    where: {
      phone,
      code,
      expiresAt: { gt: new Date() },
      attempts: { lt: AUTH.MAX_OTP_ATTEMPTS },
    },
    orderBy: { createdAt: 'desc' },
  })

  if (!otpCode) {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤ —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    await prisma.otpCode.updateMany({
      where: {
        phone,
        expiresAt: { gt: new Date() },
      },
      data: {
        attempts: { increment: 1 },
      },
    })

    return errorResponse(ERROR_CODES.INVALID_CREDENTIALS, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', 401)
  }

  // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, —É–¥–∞–ª—è–µ–º –≤—Å–µ OTP –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  await prisma.otpCode.deleteMany({
    where: { phone },
  })

  // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
  const anonymousToken = await getTokenFromCookie(COOKIE_NAMES.ANONYMOUS_TOKEN)
  let anonymousId: string | null = null

  if (anonymousToken) {
    // –ù–∞—Ö–æ–¥–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const anonymousUser = await prisma.anonymousUser.findUnique({
      where: { sessionId: anonymousToken },
    })

    if (anonymousUser) {
      anonymousId = anonymousUser.id
    }
  }

  // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let user = await prisma.user.findUnique({
    where: { phone },
  })

  if (!user) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await prisma.user.create({
      data: {
        phone,
        firstName: firstName || null,
        lastName: lastName || null,
        email: email || null,
        role: 'CUSTOMER',
      },
    })

    console.log(`üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${phone}`)
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (firstName || lastName || email) {
      user = await prisma.user.update({
        where: { id: user.id },
        data: {
          ...(firstName && { firstName }),
          ...(lastName && { lastName }),
          ...(email && { email }),
        },
      })
    }

    console.log(`üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${phone}`)
  }

  // –ï—Å–ª–∏ –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  if (anonymousId) {
    try {
      await mergeAnonymousDataToUser(user.id, anonymousId)
      console.log(`üîÑ –î–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã`)
    } catch (error) {
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ —Å–ª–∏—è–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
    }
  }

  // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω—ã
  const payload = {
    sub: user.id,
    role: user.role,
    type: 'user' as const,
  }

  const accessToken = await createAccessToken(payload)
  const refreshToken = await createRefreshToken(payload)

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies
  await setAuthCookies(accessToken, refreshToken)

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  return successResponse({
    user: {
      id: user.id,
      phone: user.phone,
      email: user.email,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
    },
    tokens: {
      accessToken,
      refreshToken,
    },
  })
})
