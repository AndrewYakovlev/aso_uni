import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { prisma } from '@/shared/lib/prisma'
import { verifyToken, ACCESS_TOKEN_COOKIE, ANONYMOUS_TOKEN_COOKIE } from '@/shared/lib/auth'

export async function GET(request: NextRequest) {
  try {
    const cookieStore = await cookies()
    const accessToken = cookieStore.get(ACCESS_TOKEN_COOKIE)?.value
    const anonymousToken = cookieStore.get(ANONYMOUS_TOKEN_COOKIE)?.value

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º access token
    if (accessToken) {
      const payload = verifyToken(accessToken)

      if (payload && payload.type === 'access') {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findUnique({
          where: { id: payload.userId },
          select: {
            id: true,
            phone: true,
            email: true,
            firstName: true,
            lastName: true,
            role: true,
            phoneVerified: true,
            emailVerified: true,
            personalDiscount: true,
            customerGroup: {
              select: {
                id: true,
                name: true,
                discountPercent: true,
              },
            },
            // –°—á–∏—Ç–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            _count: {
              select: {
                orders: true,
                favorites: true,
                anonymousSessions: true,
              },
            },
          },
        })

        if (user) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          await prisma.user.update({
            where: { id: user.id },
            data: { lastActivityAt: new Date() },
          })

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π
          const anonymousSessionsCount = await prisma.anonymousUser.count({
            where: { userId: user.id },
          })

          return NextResponse.json({
            authenticated: true,
            user: {
              ...user,
              ordersCount: user._count.orders,
              favoritesCount: user._count.favorites,
              anonymousSessionsCount: anonymousSessionsCount,
            },
          })
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ç–æ–∫–µ–Ω
    if (anonymousToken) {
      console.log(
        'üîç Looking for anonymous user with token:',
        anonymousToken.substring(0, 8) + '...'
      )

      const anonymousUser = await prisma.anonymousUser.findUnique({
        where: { token: anonymousToken },
        select: {
          id: true,
          sessionId: true,
          createdAt: true,
          _count: {
            select: {
              carts: true,
              favorites: true,
              viewHistory: true,
            },
          },
        },
      })

      if (anonymousUser) {
        console.log('‚úÖ Found anonymous user:', {
          id: anonymousUser.id,
          sessionId: anonymousUser.sessionId,
        })

        return NextResponse.json({
          authenticated: false,
          anonymous: true,
          session: {
            id: anonymousUser.id,
            sessionId: anonymousUser.sessionId,
            createdAt: anonymousUser.createdAt,
            cartsCount: anonymousUser._count.carts,
            favoritesCount: anonymousUser._count.favorites,
            viewsCount: anonymousUser._count.viewHistory,
          },
        })
      } else {
        console.log('‚ùå Anonymous user not found in database')

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
        const totalAnonymousUsers = await prisma.anonymousUser.count()
        console.log('üìä Total anonymous users in DB:', totalAnonymousUsers)
      }
    } else {
      console.log('‚ùå No anonymous token in cookies')
    }

    // –ù–µ—Ç –Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏
    return NextResponse.json({
      authenticated: false,
      anonymous: false,
    })
  } catch (error) {
    console.error('Error in auth/me:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
}
