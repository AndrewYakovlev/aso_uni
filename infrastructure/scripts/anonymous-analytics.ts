import { prisma } from '@/shared/lib/prisma'

async function runAnalytics() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
  console.log('=====================================\n')

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const totalAnonymous = await prisma.anonymousUser.count()
  console.log(`üë• –í—Å–µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalAnonymous}`)

  // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  const thirtyDaysAgo = new Date()
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30)

  const activeLastMonth = await prisma.anonymousUser.count({
    where: {
      lastActivity: {
        gte: thirtyDaysAgo,
      },
    },
  })
  console.log(`üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: ${activeLastMonth}`)

  // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏
  const withCarts = await prisma.anonymousUser.count({
    where: {
      carts: {
        some: {},
      },
    },
  })
  console.log(`üõí –° –∫–æ—Ä–∑–∏–Ω–∞–º–∏: ${withCarts}`)

  // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  const withViews = await prisma.anonymousUser.count({
    where: {
      viewHistory: {
        some: {},
      },
    },
  })
  console.log(`üëÅÔ∏è  –° –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${withViews}`)

  // –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —á–∞—Ç–∞–º–∏
  const withChats = await prisma.anonymousUser.count({
    where: {
      chats: {
        some: {},
      },
    },
  })
  console.log(`üí¨ –° —á–∞—Ç–∞–º–∏: ${withChats}`)

  // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
  // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö
  const convertedUsers = await prisma.user.count({
    where: {
      OR: [
        {
          carts: {
            some: {
              createdAt: {
                lt: await prisma.user
                  .findFirst({ select: { createdAt: true } })
                  .then(u => u?.createdAt || new Date()),
              },
            },
          },
        },
        {
          viewHistory: {
            some: {
              viewedAt: {
                lt: await prisma.user
                  .findFirst({ select: { createdAt: true } })
                  .then(u => u?.createdAt || new Date()),
              },
            },
          },
        },
      ],
    },
  })

  const conversionRate =
    totalAnonymous > 0 ? ((convertedUsers / totalAnonymous) * 100).toFixed(2) : 0
  console.log(`üìà –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: ${conversionRate}%`)

  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:')
  const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']

  for (let day = 0; day < 7; day++) {
    const count = await prisma.$queryRaw<[{ count: bigint }]>`
      SELECT COUNT(*) as count
      FROM anonymous_users
      WHERE EXTRACT(DOW FROM created_at) = ${day}
    `
    console.log(`   ${dayNames[day]}: ${count[0].count}`)
  }

  // –¢–æ–ø User-Agent
  console.log('\nüì± –¢–æ–ø 5 User-Agent:')
  const topUserAgents = await prisma.anonymousUser.groupBy({
    by: ['userAgent'],
    _count: {
      userAgent: true,
    },
    orderBy: {
      _count: {
        userAgent: 'desc',
      },
    },
    take: 5,
  })

  topUserAgents.forEach((ua, index) => {
    const agent = ua.userAgent?.substring(0, 50) || 'Unknown'
    console.log(`   ${index + 1}. ${agent}... (${ua._count.userAgent})`)
  })

  // –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const avgActivityDuration = await prisma.$queryRaw<[{ avg_hours: number }]>`
    SELECT AVG(EXTRACT(EPOCH FROM (last_activity - created_at)) / 3600) as avg_hours
    FROM anonymous_users
    WHERE last_activity > created_at
  `
  console.log(
    `\n‚è±Ô∏è  –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${avgActivityDuration[0].avg_hours?.toFixed(2) || 0} —á–∞—Å–æ–≤`
  )

  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
runAnalytics()
  .then(() => {
    process.exit(0)
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error)
    process.exit(1)
  })
