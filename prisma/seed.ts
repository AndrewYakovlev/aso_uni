import { PrismaClient } from "@prisma/client"
import bcrypt from "bcryptjs"

const prisma = new PrismaClient()

async function main() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

  // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const defaultCustomerGroup = await prisma.customerGroup.create({
    data: {
      name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞",
      discountPercent: 0,
      benefits: {
        description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
      },
    },
  })

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const adminUser = await prisma.user.create({
    data: {
      phone: "+79999999999",
      email: "admin@aso.local",
      firstName: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
      lastName: "–°–∏—Å—Ç–µ–º—ã",
      role: "ADMIN",
    },
  })

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:", adminUser.phone)

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const managerUser = await prisma.user.create({
    data: {
      phone: "+79998888888",
      email: "manager@aso.local",
      firstName: "–ú–µ–Ω–µ–¥–∂–µ—Ä",
      lastName: "–ü—Ä–æ–¥–∞–∂",
      role: "MANAGER",
    },
  })

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä:", managerUser.phone)

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const customerUser = await prisma.user.create({
    data: {
      phone: "+79997777777",
      email: "customer@aso.local",
      firstName: "–¢–µ—Å—Ç–æ–≤—ã–π",
      lastName: "–ö–ª–∏–µ–Ω—Ç",
      role: "CUSTOMER",
      customerGroupId: defaultCustomerGroup.id,
    },
  })

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç:", customerUser.phone)

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤
  const chatStatuses = await Promise.all([
    prisma.chatStatus.create({
      data: {
        name: "–ù–æ–≤—ã–π",
        code: "new",
        color: "#10B981",
        sortOrder: 10,
        isActive: true,
      },
    }),
    prisma.chatStatus.create({
      data: {
        name: "–í —Ä–∞–±–æ—Ç–µ",
        code: "in_progress",
        color: "#3B82F6",
        sortOrder: 20,
        isActive: true,
      },
    }),
    prisma.chatStatus.create({
      data: {
        name: "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞",
        code: "awaiting_response",
        color: "#F59E0B",
        sortOrder: 30,
        isActive: true,
      },
    }),
    prisma.chatStatus.create({
      data: {
        name: "–ó–∞–∫—Ä—ã—Ç",
        code: "closed",
        color: "#6B7280",
        sortOrder: 40,
        isActive: true,
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤:", chatStatuses.length)

  // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
  const orderStatuses = await Promise.all([
    prisma.orderStatus.create({
      data: {
        name: "–ù–æ–≤—ã–π",
        code: "new",
        color: "#10B981",
        description: "–ó–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω",
        isInitial: true,
        sortOrder: 10,
        isActive: true,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        code: "processing",
        color: "#3B82F6",
        description: "–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        sortOrder: 20,
        isActive: true,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
        code: "awaiting_payment",
        color: "#F59E0B",
        description: "–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞",
        sortOrder: 30,
        isActive: true,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–û–ø–ª–∞—á–µ–Ω",
        code: "paid",
        color: "#8B5CF6",
        description: "–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω",
        sortOrder: 40,
        isActive: true,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
        code: "shipping",
        color: "#06B6D4",
        description: "–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏",
        sortOrder: 50,
        isActive: true,
        canCancelOrder: false,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
        code: "delivered",
        color: "#059669",
        description: "–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É",
        isFinalSuccess: true,
        sortOrder: 60,
        isActive: true,
        canCancelOrder: false,
      },
    }),
    prisma.orderStatus.create({
      data: {
        name: "–û—Ç–º–µ–Ω–µ–Ω",
        code: "cancelled",
        color: "#EF4444",
        description: "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        isFinalFailure: true,
        sortOrder: 70,
        isActive: true,
        canCancelOrder: false,
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:", orderStatuses.length)

  // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏
  const deliveryMethods = await Promise.all([
    prisma.deliveryMethod.create({
      data: {
        name: "–°–∞–º–æ–≤—ã–≤–æ–∑",
        code: "pickup",
        description: "–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞",
        price: 0,
        sortOrder: 10,
        isActive: true,
        settings: {
          address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, –¥. 1",
          workingHours: "–ü–Ω-–ü—Ç: 9:00-18:00, –°–±: 10:00-16:00",
        },
      },
    }),
    prisma.deliveryMethod.create({
      data: {
        name: "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º",
        code: "courier",
        description: "–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É",
        price: 300,
        minAmount: 3000,
        sortOrder: 20,
        isActive: true,
        settings: {
          deliveryTime: "1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è",
          zones: ["–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î"],
        },
      },
    }),
    prisma.deliveryMethod.create({
      data: {
        name: "–î–æ—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π",
        code: "transport_company",
        description: "–î–æ—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –ø–æ –†–æ—Å—Å–∏–∏",
        price: 500,
        sortOrder: 30,
        isActive: true,
        settings: {
          companies: ["–°–î–≠–ö", "–î–µ–ª–æ–≤—ã–µ –ª–∏–Ω–∏–∏", "–ü–≠–ö"],
          deliveryTime: "3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
        },
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏:", deliveryMethods.length)

  // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
  const paymentMethods = await Promise.all([
    prisma.paymentMethod.create({
      data: {
        name: "–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
        code: "cash",
        description: "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É –∏–ª–∏ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ",
        icon: "cash",
        isOnline: false,
        sortOrder: 10,
        isActive: true,
      },
    }),
    prisma.paymentMethod.create({
      data: {
        name: "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω",
        code: "card_online",
        description: "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π Visa, MasterCard, –ú–ò–†",
        icon: "credit-card",
        isOnline: true,
        sortOrder: 20,
        isActive: true,
        commission: 2.5,
        settings: {
          provider: "yookassa",
          supportedCards: ["visa", "mastercard", "mir"],
        },
      },
    }),
    prisma.paymentMethod.create({
      data: {
        name: "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç",
        code: "invoice",
        description: "–û–ø–ª–∞—Ç–∞ –ø–æ —Å—á–µ—Ç—É –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü",
        icon: "file-text",
        isOnline: false,
        sortOrder: 30,
        isActive: true,
        settings: {
          requiresCompanyDetails: true,
        },
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:", paymentMethods.length)

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±—Ä–µ–Ω–¥—ã
  const brands = await Promise.all([
    prisma.brand.create({
      data: {
        name: "Bosch",
        slug: "bosch",
        country: "–ì–µ—Ä–º–∞–Ω–∏—è",
        description: "–ù–µ–º–µ—Ü–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞",
        isActive: true,
      },
    }),
    prisma.brand.create({
      data: {
        name: "Mann-Filter",
        slug: "mann-filter",
        country: "–ì–µ—Ä–º–∞–Ω–∏—è",
        description: "–í–µ–¥—É—â–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤",
        isActive: true,
      },
    }),
    prisma.brand.create({
      data: {
        name: "NGK",
        slug: "ngk",
        country: "–Ø–ø–æ–Ω–∏—è",
        description: "–ú–∏—Ä–æ–≤–æ–π –ª–∏–¥–µ—Ä –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ —Å–≤–µ—á–µ–π –∑–∞–∂–∏–≥–∞–Ω–∏—è",
        isActive: true,
      },
    }),
    prisma.brand.create({
      data: {
        name: "Denso",
        slug: "denso",
        country: "–Ø–ø–æ–Ω–∏—è",
        description: "–Ø–ø–æ–Ω—Å–∫–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
        isActive: true,
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –±—Ä–µ–Ω–¥—ã:", brands.length)

  // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const rootCategories = await Promise.all([
    prisma.category.create({
      data: {
        name: "–î–≤–∏–≥–∞—Ç–µ–ª—å",
        slug: "engine",
        description: "–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        sortOrder: 10,
        isActive: true,
        metaTitle: "–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê–°–û",
        metaDescription:
          "–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏ –∞–Ω–∞–ª–æ–≥–∏. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏.",
      },
    }),
    prisma.category.create({
      data: {
        name: "–¢–æ—Ä–º–æ–∑–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        slug: "brake-system",
        description: "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        sortOrder: 20,
        isActive: true,
        metaTitle:
          "–ó–∞–ø—á–∞—Å—Ç–∏ —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê–°–û",
        metaDescription:
          "–¢–æ—Ä–º–æ–∑–Ω—ã–µ –¥–∏—Å–∫–∏, –∫–æ–ª–æ–¥–∫–∏, —Å—É–ø–ø–æ—Ä—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.",
      },
    }),
    prisma.category.create({
      data: {
        name: "–ü–æ–¥–≤–µ—Å–∫–∞",
        slug: "suspension",
        description: "–≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–≤–µ—Å–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        sortOrder: 30,
        isActive: true,
        metaTitle: "–ó–∞–ø—á–∞—Å—Ç–∏ –ø–æ–¥–≤–µ—Å–∫–∏ - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê–°–û",
        metaDescription:
          "–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã, –ø—Ä—É–∂–∏–Ω—ã, —Ä—ã—á–∞–≥–∏ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–≤–µ—Å–∫–∏.",
      },
    }),
    prisma.category.create({
      data: {
        name: "–§–∏–ª—å—Ç—Ä—ã",
        slug: "filters",
        description: "–í—Å–µ –≤–∏–¥—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        sortOrder: 40,
        isActive: true,
        metaTitle: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –∫—É–ø–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –ê–°–û",
        metaDescription:
          "–í–æ–∑–¥—É—à–Ω—ã–µ, –º–∞—Å–ª—è–Ω—ã–µ, —Ç–æ–ø–ª–∏–≤–Ω—ã–µ, —Å–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.",
      },
    }),
  ])

  console.log("‚úÖ –°–æ–∑–¥–∞–Ω—ã –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", rootCategories.length)

  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è "–§–∏–ª—å—Ç—Ä—ã"
  const filtersCategory = rootCategories.find(c => c.slug === "filters")!
  const filterSubcategories = await Promise.all([
    prisma.category.create({
      data: {
        name: "–í–æ–∑–¥—É—à–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
        slug: "air-filters",
        description: "–§–∏–ª—å—Ç—Ä—ã –≤–æ–∑–¥—É—à–Ω—ã–µ –¥–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è",
        parentId: filtersCategory.id,
        sortOrder: 10,
        isActive: true,
      },
    }),
    prisma.category.create({
      data: {
        name: "–ú–∞—Å–ª—è–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
        slug: "oil-filters",
        description: "–§–∏–ª—å—Ç—Ä—ã –¥–ª—è –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞",
        parentId: filtersCategory.id,
        sortOrder: 20,
        isActive: true,
      },
    }),
    prisma.category.create({
      data: {
        name: "–¢–æ–ø–ª–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
        slug: "fuel-filters",
        description: "–§–∏–ª—å—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
        parentId: filtersCategory.id,
        sortOrder: 30,
        isActive: true,
      },
    }),
    prisma.category.create({
      data: {
        name: "–°–∞–ª–æ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã",
        slug: "cabin-filters",
        description: "–§–∏–ª—å—Ç—Ä—ã —Å–∞–ª–æ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        parentId: filtersCategory.id,
        sortOrder: 40,
        isActive: true,
      },
    }),
  ])

  console.log(
    "‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
    filterSubcategories.length
  )

  console.log("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async e => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", e)
    await prisma.$disconnect()
    process.exit(1)
  })
