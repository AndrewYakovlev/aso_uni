'use client'

import { useState } from 'react'
import {
  Button,
  TextInput,
  PinInput,
  Stack,
  Text,
  Card,
  Group,
  Badge,
  Loader,
  Center,
  Code,
} from '@mantine/core'
import { notifications } from '@mantine/notifications'
import { useAuthStore } from '@/entities/user/model/auth-store'

export function AuthTest() {
  const { user, anonymousSession, isAuthenticated, isLoading, sendOTP, verifyOTP, performLogout } =
    useAuthStore()
  const [phone, setPhone] = useState('')
  const [code, setCode] = useState('')
  const [step, setStep] = useState<'phone' | 'code'>('phone')
  const [maskedPhone, setMaskedPhone] = useState('')
  const [sending, setSending] = useState(false)
  const [verifying, setVerifying] = useState(false)

  const handleSendCode = async () => {
    if (!phone || phone.length < 10) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        color: 'red',
      })
      return
    }

    setSending(true)
    const result = await sendOTP(phone)
    setSending(false)

    if (result.success) {
      setStep('code')
      setMaskedPhone(result.maskedPhone || phone)
      notifications.show({
        title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        message: `SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${result.maskedPhone}`,
        color: 'green',
      })
    } else {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: result.error,
        color: 'red',
      })
    }
  }

  const handleVerifyCode = async () => {
    if (!code || code.length !== 6) {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: '–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥',
        color: 'red',
      })
      return
    }

    setVerifying(true)
    const result = await verifyOTP(phone, code)
    setVerifying(false)

    if (result.success) {
      notifications.show({
        title: '–£—Å–ø–µ—à–Ω–æ',
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã',
        color: 'green',
      })
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setPhone('')
      setCode('')
      setStep('phone')
    } else {
      notifications.show({
        title: '–û—à–∏–±–∫–∞',
        message: result.error,
        color: 'red',
      })
    }
  }

  const handleLogout = async () => {
    await performLogout()
    notifications.show({
      title: '–í—ã—Ö–æ–¥',
      message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
      color: 'blue',
    })
  }

  const handleRefresh = async () => {
    await useAuthStore.getState().checkAuth()
    notifications.show({
      title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
      message: '–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω',
      color: 'blue',
    })
  }

  const handleTestSessions = async () => {
    try {
      const response = await fetch('/api/v1/auth/test-sessions')
      const data = await response.json()
      console.log('üìä Session Test Results:', data)
      notifications.show({
        title: '–¢–µ—Å—Ç —Å–µ—Å—Å–∏–π',
        message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞',
        color: 'blue',
      })
    } catch (error) {
      console.error('Test sessions error:', error)
    }
  }

  if (isLoading) {
    return (
      <Center h={200}>
        <Loader />
      </Center>
    )
  }

  return (
    <Stack gap="md">
      <Card shadow="sm" padding="lg" radius="md">
        <Stack gap="xs">
          <Group justify="space-between">
            <Text size="lg" fw={500}>
              –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </Text>
            <Group gap="xs">
              <Button size="xs" variant="light" onClick={handleRefresh}>
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button size="xs" variant="light" color="grape" onClick={handleTestSessions}>
                –¢–µ—Å—Ç —Å–µ—Å—Å–∏–π
              </Button>
            </Group>
          </Group>

          {isAuthenticated && user ? (
            <>
              <Group>
                <Badge color="green" size="lg">
                  –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                </Badge>
                <Badge color="blue" variant="light">
                  {user.role}
                </Badge>
              </Group>
              <Text size="sm">
                ID: <Code>{user.id}</Code>
              </Text>
              <Text size="sm">–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}</Text>
              {user.firstName && (
                <Text size="sm">
                  –ò–º—è: {user.firstName} {user.lastName}
                </Text>
              )}
              <Text size="sm">–ó–∞–∫–∞–∑–æ–≤: {user.ordersCount || 0}</Text>
              <Text size="sm">–ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {user.favoritesCount || 0}</Text>
              <Text size="sm" fw={500} c="blue">
                –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {user.anonymousSessionsCount || 0}
              </Text>
              <Button onClick={handleLogout} variant="light" color="red" mt="md">
                –í—ã–π—Ç–∏
              </Button>
            </>
          ) : (
            <>
              <Badge color="gray" size="lg">
                –ì–æ—Å—Ç—å
              </Badge>
              {anonymousSession ? (
                <>
                  <Text size="sm" c="dimmed">
                    –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Å–µ—Å—Å–∏—è
                  </Text>
                  <Text size="xs">
                    ID: <Code>{anonymousSession.id}</Code>
                  </Text>
                  <Text size="xs">
                    Session: <Code>{anonymousSession.sessionId}</Code>
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ö–æ—Ä–∑–∏–Ω: {anonymousSession.cartsCount}
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {anonymousSession.favoritesCount}
                  </Text>
                  <Text size="xs" c="dimmed">
                    –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {anonymousSession.viewsCount}
                  </Text>
                  <Text size="xs" c="dimmed">
                    –°–æ–∑–¥–∞–Ω–∞: {new Date(anonymousSession.createdAt).toLocaleString('ru')}
                  </Text>
                </>
              ) : (
                <Text size="sm" c="red">
                  –ù–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ cookies)
                </Text>
              )}
            </>
          )}
        </Stack>
      </Card>

      {!isAuthenticated && (
        <Card shadow="sm" padding="lg" radius="md">
          <Stack gap="md">
            <Text size="lg" fw={500}>
              –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </Text>

            {step === 'phone' ? (
              <>
                <TextInput
                  label="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                  placeholder="+7 900 123 45 67"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  disabled={sending}
                />
                <Button
                  onClick={handleSendCode}
                  fullWidth
                  loading={sending}
                  disabled={!phone || phone.length < 10}
                >
                  –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
                </Button>
                <Text size="xs" c="dimmed" ta="center">
                  –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∫–æ–¥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
                </Text>
              </>
            ) : (
              <>
                <Text size="sm" ta="center">
                  –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {maskedPhone}
                </Text>
                <PinInput
                  length={6}
                  type="number"
                  value={code}
                  onChange={setCode}
                  disabled={verifying}
                  oneTimeCode
                />
                <Group grow>
                  <Button
                    variant="light"
                    onClick={() => {
                      setStep('phone')
                      setCode('')
                    }}
                    disabled={verifying}
                  >
                    –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                  </Button>
                  <Button
                    onClick={handleVerifyCode}
                    loading={verifying}
                    disabled={!code || code.length !== 6}
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                  </Button>
                </Group>
              </>
            )}
          </Stack>
        </Card>
      )}

      <Card shadow="sm" padding="md" radius="md">
        <Text size="sm" fw={500} mb="xs">
          –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        </Text>
        <Text size="xs" c="dimmed">
          –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cookies –≤ DevTools ‚Üí Application ‚Üí Cookies:
        </Text>
        <Stack gap="xs" mt="xs">
          <Text size="xs">‚Ä¢ aso-anonymous-token - —Ç–æ–∫–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏</Text>
          <Text size="xs">‚Ä¢ aso-access-token - —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</Text>
          <Text size="xs">‚Ä¢ aso-refresh-token - —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</Text>
        </Stack>
      </Card>
    </Stack>
  )
}
