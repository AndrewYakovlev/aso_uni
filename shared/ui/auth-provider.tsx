'use client'

import { useEffect } from 'react'
import { useAuthStore } from '@/entities/user/model/auth-store'

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const checkAuth = useAuthStore((state) => state.checkAuth)

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const initAuth = async () => {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await fetch('/api/v1/auth/me')
      const data = await response.json()

      console.log('üîç Initial auth check:', data)

      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å–µ—Å—Å–∏–∏ - —Å–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—É—é —Å–µ—Å—Å–∏—é
      if (!data.authenticated && !data.anonymous) {
        console.log('üÜï No session found, creating anonymous session...')

        try {
          const createResponse = await fetch('/api/v1/auth/anonymous', {
            method: 'POST',
          })
          const createData = await createResponse.json()

          if (createData.success) {
            console.log('‚úÖ Anonymous session created:', createData.session)
          } else {
            console.error('‚ùå Failed to create anonymous session:', createData.error)
          }
        } catch (error) {
          console.error('‚ùå Error creating anonymous session:', error)
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ store
      await checkAuth()
    }

    initAuth()
  }, [checkAuth])

  return <>{children}</>
}
