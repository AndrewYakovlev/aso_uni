import { config } from '@/env'

export interface SMSResult {
  success: boolean
  messageId?: string
  error?: string
}

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ SMS.ru API
interface SMSRuResponse {
  status: string
  status_text?: string
  sms?: {
    [phone: string]: {
      status: string
      status_text?: string
      sms_id?: string
    }
  }
}

interface SMSRuBalanceResponse {
  status: string
  status_text?: string
  balance?: string
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMS.ru API
 * –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export async function sendSMS(phone: string, message: string): Promise<SMSResult> {
  // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SMS
  if (config.sms.testMode || config.app.env === 'development') {
    console.log('üì± SMS Test Mode:')
    console.log(`To: ${phone}`)
    console.log(`Message: ${message}`)
    console.log('---')

    return {
      success: true,
      messageId: 'test-' + Date.now(),
    }
  }

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ SMS.ru API
    const params = new URLSearchParams({
      api_id: config.sms.apiKey,
      to: phone.replace('+', ''), // SMS.ru –Ω–µ —Ç—Ä–µ–±—É–µ—Ç +
      msg: message,
      json: '1',
    })

    const response = await fetch(`https://sms.ru/sms/send?${params}`, {
      method: 'GET',
    })

    const data = (await response.json()) as SMSRuResponse

    if (data.status === 'OK' && data.sms) {
      const phoneKey = Object.keys(data.sms)[0]
      const smsData = data.sms[phoneKey]

      return {
        success: true,
        messageId: smsData.sms_id || 'unknown',
      }
    } else {
      return {
        success: false,
        error: data.status_text || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS',
      }
    }
  } catch (error) {
    console.error('SMS sending error:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS',
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞
 */
export async function sendOTPCode(phone: string, code: string): Promise<SMSResult> {
  const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ê–°–û: ${code}\n–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
  return sendSMS(phone, message)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SMS.ru (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
 */
export async function checkSMSBalance(): Promise<{
  success: boolean
  balance?: number
  error?: string
}> {
  if (config.sms.testMode || config.app.env === 'development') {
    return {
      success: true,
      balance: 999999,
    }
  }

  try {
    const response = await fetch(`https://sms.ru/my/balance?api_id=${config.sms.apiKey}&json=1`)
    const data = (await response.json()) as SMSRuBalanceResponse

    if (data.status === 'OK' && data.balance) {
      return {
        success: true,
        balance: parseFloat(data.balance),
      }
    } else {
      return {
        success: false,
        error: data.status_text || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞',
      }
    }
  } catch (error) {
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞',
    }
  }
}
